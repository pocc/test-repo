% This is based on mermaid.js syntax. More info can be found at https://mermaidjs.github.io/
% Mermaid live editor: https://mermaidjs.github.io/mermaid-live-editor

graph TD
	ERR(USER: FIX ISSUE)
	MVP[ASSUMES CLIENT VPN WITH MERAKI AUTH]
	NMVP[NOT MVP]

	P0[P0. Program initializes]
	P1(P1. USER: Enter username + password)
	P2{P2. Validate supplied<br>user/pass}
	%% If orgs == 1, then they won't need to select which one
	P3{P3. dash orgs > 1?}
	P4[P4. List Dashboard Organizations]
	P5(P5. USER: Choose Dashboard Organization)
	P6{P6. dash mx networks > 1?}
	%% If networks == 1, then they won't need to select which one
	P7[P7. List MX Networks]
	P8(P8. USER: Choose Network)
	%% VPN name will be autopopulated from netowrk name, but they can change it
	P9(P9. USER: Choose VPN Name)

	%% ASSERT: At this point, we know correct user, pass, vpn name, network, org
	PA{PA. Is the MX online?}
	PB{PB. Is Client VPN enabled?}
	PC{PC. Authentication Type?}
	PD{PD. Is the user authorized<br>for client vpn?}

	%% Checking for dumb mistakes
	PE{PE. Are UDP ports 500/4500 being <br>port forwarded through the firewall?}
	PF{PF. Can the client ping the<br> firewall if ICMP is enabled?}

	%% ASSERT: At this point, basic VPN checks have been made
	PG[PG. Generate Client VPN config]
	PH[PH. Attempt VPN connection]
	PI[PI. Program Exit]
	PJ[<strong>TROUBLESHOOTING FLOW CHART</strong><br>PJ. Troubleshoot why connection failed... <br>]

	MVP
	%% user/pass
	P0 --> P1
	P1 --> P2
	P2 --> |Invalid user/pass| P1
	P2 --> |valid user/pass| P3

	%% orgs & networks
	P3 --> |orgs > 1| P4
	P4 --> P5
	P5 --> P6
	P3 --> |orgs == 1| P6
	P6 --> |networks > 1| P7
	P7 --> P8
	P8 --> P9
	P6 --> |networks == 1| P9
	P9 --> |no change| PA
	P9 --> |User changes vpn name| PA

	%% Check settings before connecting
	PA --> |yes| PB
	PB --> |yes| PC
	PC --> |Meraki Auth| PD
	PD --> |yes| PE
	PE --> |yes| PF

	PA --> |no| ERR
	PB --> |no| ERR
	PC --> |Active Directory| NMVP
	PC --> |RADIUS| NMVP
	PD --> |no| ERR
	PE --> |no| ERR

	%% Connect VPN
	PF --> PG
	PG --> PH
	PH --> |Client connects successfully| PI
	PH --> |Client fails to connect| PJ

%Troubleshooting after failure
graph TD
	T0[T0. Get rasdial console error]
	T1[T1. Get Windows Event Log entry]
	T2[T2. Take pcap]
	T3{T3. Get default Interface}
	T4[T4. Collect pcap on port 500/4500]
	T5[T5. Present error and pcap data to user]

	T0 --> T1
	T1 --> T2
	T2 --> T3
	T3 --> T4
	T4 --> T5

%	NOTES: failed psk fails at key exchange, ISAKMP Phase 1
%		Phase 1
%			C-->S Security Association
%			S-->C Security Association
%			C-->S Key Exchange
%			S--C Key Exchange
%			FAIL
%
%	NOTES: failed at user/pass or not PAP
%		Phase 1 - yes
%		Phase 2 - yes
%		ESP traffic
%		2 informationals sent from client to server
%	> Explicit error message shows up on end device
%
%	Common for all misconfigurations: "msg: no configuration found for <IP>."
%
%	Wrong IP
%		Client sends ISAKMP packets: 1 2 3 4 come at 0s, 1s, 2s, 5s and then without a response, fail
%
%	% THis will capture traffic on UDP 500 + 4500
%	.\tshark.exe -i <interface> -a duration:60 -w clientvpn.pcap -f udp port 500 or udp port 4500